apiVersion: apps/v1
kind: Deployment
metadata:
  name: concurrency-client
  labels:
    app: concurrency-client
spec:
  replicas: 8
  selector:
    matchLabels:
      app: concurrency-client
  template:
    metadata:
      labels:
        app: concurrency-client
    spec:
      containers:
      - name: client
        image: golang:1.18
        env:
          - name: INGRESS_HOST
            value: foo.test.ingress.dev
        command:
        - /bin/sh
        - -c
        - |
          mkdir client && cd client && go mod init client
          cat > main.go <<EOF
            package main
            
            import (
            	"context"
            	"crypto/tls"
            	"io/ioutil"
            	"log"
            	"net"
            	"net/http"
            	"os"
            	"time"
            )
            
            func main() {
            	rps := 15
            	concurrency := 2000
            
            	tokens := make(chan struct{}, rps)
            	for i := 0; i < rps; i++ {
            		tokens <- struct{}{}
            	}
            	go func() {
            		timer := time.NewTicker(time.Second / time.Duration(rps))
            		for range timer.C {
            			tokens <- struct{}{}
            		}
            	}()
            
            	for i := 0; i < concurrency; i++ {
            		go func() {
            			for {
            				<-tokens
            				probe()
            			}
            		}()
            	}
            
            	<-context.Background().Done()
            }
            
            var dialer = &net.Dialer{}
            var client = &http.Client{
            	Transport: &http.Transport{
            		DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {
            			return dialer.DialContext(ctx, network, "app-routing-ingress-controller.app-routing-system:443")
            		},
            		TLSClientConfig: &tls.Config{
            			InsecureSkipVerify: true,
            		},
            	},
            }
            
            func probe() {
            	req, err := http.NewRequest("GET", "https://"+os.Getenv("INGRESS_HOST")+"/sleep", nil)
            	if err != nil {
            		panic(err)
            	}
            
            	resp, err := client.Do(req)
            	if err != nil {
            		log.Printf("error: %s", err)
            		return
            	}
            	defer resp.Body.Close()
            
            	if resp.StatusCode == 200 {
            		return
            	}
            
            	raw, err := ioutil.ReadAll(resp.Body)
            	if err != nil {
            		log.Printf("read error: %s", err)
            		return
            	}
            	log.Printf("response: %s", raw)
            }
          EOF
          go run main.go
