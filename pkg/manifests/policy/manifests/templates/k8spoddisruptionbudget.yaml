apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  annotations:
    description: |-
      Disallow the following scenarios when deploying PodDisruptionBudgets or resources that implement the replica subresource (e.g. Deployment, ReplicationController, ReplicaSet, StatefulSet): 1. Deployment of PodDisruptionBudgets with .spec.maxUnavailable == 0 2. Deployment of PodDisruptionBudgets with .spec.minAvailable == .spec.replicas of the resource with replica subresource This will prevent PodDisruptionBudgets from blocking voluntary disruptions such as node draining.
      https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
    metadata.gatekeeper.sh/requires-sync-data: |
      "[
        [
          {
            "groups":["policy"],
            "versions": ["v1"],
            "kinds": ["PodDisruptionBudget"]
          }
        ]
      ]"
    metadata.gatekeeper.sh/title: Pod Disruption Budget
    metadata.gatekeeper.sh/version: 1.0.3
  name: k8spoddisruptionbudget
spec:
  crd:
    spec:
      names:
        kind: K8sPodDisruptionBudget
  targets:
    - rego: "package k8spoddisruptionbudget\n\nviolation[{\"msg\": msg}] {\n  input.review.kind.kind == \"PodDisruptionBudget\"\n  pdb := input.review.object\n\n  not valid_pdb_max_unavailable(pdb)\n  msg := sprintf(\n    \"PodDisruptionBudget <%v> has maxUnavailable of 0, only positive integers are allowed for maxUnavailable\",\n    [pdb.metadata.name],\n  )\n}\n\nviolation[{\"msg\": msg}] {\n  obj := input.review.object\n  pdb := data.inventory.namespace[obj.metadata.namespace][\"policy/v1\"].PodDisruptionBudget[_]\n\n  matchLabels := { [label, value] | some label; value := pdb.spec.selector.matchLabels[label] }\n  labels := { [label, value] | some label; value := obj.spec.selector.matchLabels[label] }\n  count(matchLabels - labels) == 0\n\n  not valid_pdb_max_unavailable(pdb)\n  msg := sprintf(\n    \"%v <%v> has been selected by PodDisruptionBudget <%v> but has maxUnavailable of 0, only positive integers are allowed for maxUnavailable\",\n    [obj.kind, obj.metadata.name, pdb.metadata.name],\n  )\n}\n\nviolation[{\"msg\": msg}] {\n  obj := input.review.object\n  pdb := data.inventory.namespace[obj.metadata.namespace][\"policy/v1\"].PodDisruptionBudget[_]\n  \n  matchLabels := { [label, value] | some label; value := pdb.spec.selector.matchLabels[label] }\n  labels := { [label, value] | some label; value := obj.spec.selector.matchLabels[label] }\n  count(matchLabels - labels) == 0\n\n  not valid_pdb_min_available(obj, pdb)\n  msg := sprintf(\n    \"%v <%v> has %v replica(s) but PodDisruptionBudget <%v> has minAvailable of %v, PodDisruptionBudget count should always be lower than replica(s), and not used when replica(s) is set to 1\",\n    [obj.kind, obj.metadata.name, obj.spec.replicas, pdb.metadata.name, pdb.spec.minAvailable],\n  )\n}\n\nvalid_pdb_min_available(obj, pdb) {\n  # default to -1 if minAvailable is not set so valid_pdb_min_available is always true\n  # for objects with >= 0 replicas. If minAvailable defaults to >= 0, objects with\n  # replicas field might violate this constraint if they are equal to the default set here\n  min_available := object.get(pdb.spec, \"minAvailable\", -1)\n  obj.spec.replicas > min_available\n}\n\nvalid_pdb_max_unavailable(pdb) {\n  # default to 1 if maxUnavailable is not set so valid_pdb_max_unavailable always returns true.\n  # If maxUnavailable defaults to 0, it violates this constraint because all pods needs to be\n  # available and no pods can be evicted voluntarily\n  max_unavailable := object.get(pdb.spec, \"maxUnavailable\", 1)\n  max_unavailable > 0\n}\n"
      target: admission.k8s.gatekeeper.sh
