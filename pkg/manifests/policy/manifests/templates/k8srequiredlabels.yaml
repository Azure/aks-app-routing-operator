apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  annotations:
    description: Requires resources to contain specified labels, with values matching provided regular expressions.
    metadata.gatekeeper.sh/title: Required Labels
    metadata.gatekeeper.sh/version: 1.1.1
  name: k8srequiredlabels
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredLabels
      validation:
        openAPIV3Schema:
          properties:
            labels:
              description: A list of labels and values the object must specify.
              items:
                properties:
                  allowedRegex:
                    description: If specified, a regular expression the annotation's value must match. The value must contain at least one match for the regular expression.
                    type: string
                  key:
                    description: The required label.
                    type: string
                type: object
              type: array
            message:
              type: string
          type: object
  targets:
    - code:
        - engine: K8sNativeValidation
          source:
            validations:
              - expression: (has(variables.anyObject.metadata) && variables.params.labels.all(entry, has(variables.anyObject.metadata.labels) && entry.key in variables.anyObject.metadata.labels))
                messageExpression: '"missing required label, requires all of: " + variables.params.labels.map(entry, entry.key).join(", ")'
              - expression: (has(variables.anyObject.metadata) && variables.params.labels.all(entry, has(variables.anyObject.metadata.labels) && entry.key in variables.anyObject.metadata.labels && string(variables.anyObject.metadata.labels[entry.key]).matches(string(entry.allowedRegex))))
                message: regex mismatch
        - engine: Rego
          source:
            rego: |
              package k8srequiredlabels

              get_message(parameters, _default) := _default {
                not parameters.message
              }

              get_message(parameters, _) := parameters.message

              violation[{"msg": msg, "details": {"missing_labels": missing}}] {
                provided := {label | input.review.object.metadata.labels[label]}
                required := {label | label := input.parameters.labels[_].key}
                missing := required - provided
                count(missing) > 0
                def_msg := sprintf("you must provide labels: %v", [missing])
                msg := get_message(input.parameters, def_msg)
              }

              violation[{"msg": msg}] {
                value := input.review.object.metadata.labels[key]
                expected := input.parameters.labels[_]
                expected.key == key
                # do not match if allowedRegex is not defined, or is an empty string
                expected.allowedRegex != ""
                not regex.match(expected.allowedRegex, value)
                def_msg := sprintf("Label <%v: %v> does not satisfy allowed regex: %v", [key, value, expected.allowedRegex])
                msg := get_message(input.parameters, def_msg)
              }
      target: admission.k8s.gatekeeper.sh
