# File based on https://github.com/imjohnbo/ok-to-test/blob/master/.github/workflows/integration.yml
name: E2E Tests
on:
  repository_dispatch:
    types: [ ok-to-test-command ]

jobs:
  # Branch-based pull request
  e2e-trusted:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      matrix:
        cmd: [public-cluster-test, private-cluster-test]
    steps:
      - name: Branch based PR checkout
        uses: actions/checkout@v3
      - name: E2E
        uses: ./github/e2e-action
        with:
          cmd: ${{ matrix.cmd }}

  # Repo writer has commented /ok-to-test on a fork-based pull request
  e2e-fork:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      checks: write
    if: |
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.args.named.sha != '' &&
      contains(
        github.event.client_payload.pull_request.head.sha,
        github.event.client_payload.slash_command.args.named.sha
      )
    strategy:
      matrix:
        cmd: [ public-cluster-test, private-cluster-test ]
    steps:
      - name: Fork based /ok-to-test checkout
        uses: actions/checkout@v3
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

      - name: E2E
        uses: ./github/e2e-action
        with:
          cmd: ${{ matrix.cmd }}

      # Update check run called "integration-fork"
      - uses: actions/github-script@v6
        id: update-check-run
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            
            return result;